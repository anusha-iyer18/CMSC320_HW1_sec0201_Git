Q1: Why might we consider using Git?

Answer: Using Git can be helpful for version control, as you can keep track of the changes that you make through 
commit history, as Git keeps track of your code base over time, and that can be helpful to go back to so that you
can review, revise, or revert back to certain changes that assisted with your goal. Git is also useful for collaborating,
because you can maintain a central remote repository for your code base, and each developer can make their own branches
to work on different features without conflicting with anyone else's development, and then those changes can be pushed from
their local repository to the remote one to be viewed and reviewed by other developers for feedback and approval.

Q2: What field could data science be applied to? Give an Example.

Answer: One field that data science could be applied to is the healthcare field. As data scientists are able to gather, transform,
and analyze data, and also develop and produce models using machine learning and programming, this can be applied towards healthcare
data to extract important insights from datasets that can help healthcare professionals. These datasets can include things like
tracking diseases, outbreaks, population health characteristics/determinants, and health risks that exist in the population. The
resulting models and insights can help healthcare professionals make predictions on future outcomes or risks for the population's health,
and the results from the data analysis can help better inform what decisions healthcare professionals make to help the general population
and improve overall health.

Q3: What is the difference between Merging and Rebasing?

Answer: Merging allows you to applies the changes from one branch (the branch you are merging in) to the branch that you are currently on,
which allows you to combine the changes from both branches into the branch that you are currently on. When you merge the two branches,
this creates a new merge commit and it still preserves the history of the two branches before they converged. On the other hand, 
rebasing means that it takes commits from the branch you are currently on and re-applies them, essentially “replaying” them, on top of the
branch you are rebasing onto. For example, if you are on a branch called "feature" and do "git rebase main" this will apply the commits on 
feature onto the latest changes to main, and your feature now includes all the latest commits to main as well. Rebasing will make it appear 
as though your feature branch originated from the latest changes to the main branch, and rewrites the commit history of the feature branch 
so that it is linear, as opposed to merging which would have maintained the commit history of both branches.